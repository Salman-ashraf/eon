/**
 * This code was generated by Builder.io.
 */
import React from "react";
import { styled } from "@mui/material/styles";
import { useForm, Controller } from "react-hook-form";
import { Typography, Grid, Divider, Paper } from "@mui/material";
import { DataGrid, GridColDef } from "@mui/x-data-grid";
import { formatCurrency } from "../../../utils/formatters";

interface ReturnMetricsProps {
  data: {
    coc: number[];
    moic: number[];
    currentEquity: number[];
    loanBalance: number[];
    irr: number[];
  };
}
const data = {
  coc: [8, 10, 12], // Cash on Cash return percentages
  moic: [1.2, 1.5, 1.8], // Multiple on Invested Capital ratios
  currentEquity: [50000, 75000, 100000], // Current equity values in dollars
  loanBalance: [200000, 150000, 100000], // Loan balance values in dollars
  irr: [12, 15, 18], // Internal Rate of Return percentages
};

const ReturnMetricsComponent= () => {
  const { control } = useForm();

  const columns: GridColDef[] = [
    { field: "metric", headerName: "Metric", width: 150 },
    {
      field: "assumption",
      headerName: "Assumption",
      width: 120,
      renderCell: (params) => formatCurrency(params.value),
    },
    {
      field: "year1",
      headerName: "Year 1",
      width: 120,
      renderCell: (params) => formatCurrency(params.value),
    },
    {
      field: "year2",
      headerName: "3% Year 2",
      width: 120,
      renderCell: (params) => formatCurrency(params.value),
    },
    {
      field: "year3",
      headerName: "3% Year 3",
      width: 120,
      renderCell: (params) => formatCurrency(params.value),
    },
    {
      field: "year4",
      headerName: "3% Year 4",
      width: 120,
      renderCell: (params) => formatCurrency(params.value),
    },
    {
      field: "year5",
      headerName: "3% Year 5",
      width: 120,
      renderCell: (params) => formatCurrency(params.value),
    },
  ];

  const rows = [
    {
      id: 1,
      metric: "CoC",
      ...Object.fromEntries(
        data.coc.map((value, index) => [`year${index}`, value])
      ),
    },
    {
      id: 2,
      metric: "MOIC",
      ...Object.fromEntries(
        data.moic.map((value, index) => [`year${index}`, value])
      ),
    },
    {
      id: 3,
      metric: "Currently Equity *",
      ...Object.fromEntries(
        data.currentEquity.map((value, index) => [`year${index}`, value])
      ),
    },
    {
      id: 4,
      metric: "Loan Balance",
      ...Object.fromEntries(
        data.loanBalance.map((value, index) => [`year${index}`, value])
      ),
    },
    {
      id: 5,
      metric: "IRR",
      ...Object.fromEntries(
        data.irr.map((value, index) => [`year${index}`, value])
      ),
    },
  ];

  return (
    <ReturnMetricsWrapper>
      <Typography variant="h6" component="h2" gutterBottom>
        Return Metrics
      </Typography>
      <Controller
        name="metricsGrid"
        control={control}
        defaultValue={rows}
        render={({ field }) => (
          <DataGrid
            {...field}
            rows={field.value}
            columns={columns}
            autoHeight
            hideFooter
            disableColumnMenu
            disableColumnSelector
            disableDensitySelector
            sx={{
              "& .MuiDataGrid-cell": {
                border: "none",
              },
              "& .MuiDataGrid-columnHeaders": {
                backgroundColor: "rgba(35, 51, 71, 0.8)",
                color: "white",
              },
              "& .MuiDataGrid-row": {
                "&:nth-of-type(odd)": {
                  backgroundColor: "rgba(30, 44, 60, 0.9)",
                },
                "&:nth-of-type(even)": {
                  backgroundColor: "rgba(35, 51, 71, 0.8)",
                },
              },
            }}
          />
        )}
      />
    </ReturnMetricsWrapper>
  );
};

const ReturnMetricsWrapper = styled(Paper)(({ theme }) => ({
  borderRadius: theme.spacing(1),
  background:
    "linear-gradient(96deg, rgba(35, 51, 71, 0.8) 0%, rgba(30, 44, 60, 0.9) 100%)",
  backdropFilter: "blur(4px)",
  padding: theme.spacing(2),
  fontFamily: "Poppins, sans-serif",
  fontWeight: 600,
  color: theme.palette.common.white,
  maxWidth: "740px",
  [theme.breakpoints.down("md")]: {
    minHeight: "542px",
  },
}));

export default ReturnMetricsComponent;
