/**
 * This code was generated by Builder.io.
 */
import React from "react";
import { styled } from "@mui/material/styles";
import { useForm, Controller } from "react-hook-form";
import { Typography, Grid, Divider } from "@mui/material";
import MetricRow from "./MetricRow";

const metricsData = [
  {
    label: "Return on Investment (ROI)",
    assumption: "costs",
    values: ["12%", "15%", "18%", "44$"],
  },
  {
    label: "Cash on Cash Return",
    assumption: "Cash",
    values: ["8%", "10%", "12%"],
  },
  {
    label: "Net Profit Margin",
    assumption: "Nete",
    values: ["10%", "12%", "14%"],
  },
  {
    label: "Break-Even Point",
    assumption: "Tinitial investment",
    values: ["2 years", "3 years", "4 years"],
  },
];

const ReturnMetricsComponent = () => {
  const { control } = useForm();

  return (
    <ReturnMetricsWrapper>
      <Header>
        <Typography variant="h6" component="h2">
          Return Metrics
        </Typography>
        <Grid container spacing={2}>
          <Grid item xs={3}>
            <Typography variant="subtitle2">Assumption</Typography>
          </Grid>
          <Grid item xs={1.8}>
            <Typography variant="subtitle2" align="right">
              Year 1
            </Typography>
          </Grid>
          {[2, 3, 4, 5].map((year) => (
            <Grid item xs={1.8} key={year}>
              <Typography variant="subtitle2" align="right">
                3% Year {year}
              </Typography>
            </Grid>
          ))}
        </Grid>
      </Header>
      <StyledDivider />
      <MetricsContent>
        {metricsData.map((metric, index) => (
          <React.Fragment key={metric.label}>
            <Controller
              name={`metric-${index}`}
              control={control}
              defaultValue={metric}
              render={() => (
                <MetricRow
                  label={metric.label}
                  assumption={metric.assumption}
                  values={metric.values}
                />
              )}
            />
            {index < metricsData.length - 1 && <StyledDivider />}
          </React.Fragment>
        ))}
      </MetricsContent>
    </ReturnMetricsWrapper>
  );
};

const ReturnMetricsWrapper = styled("section")(({ theme }) => ({
  borderRadius: theme.spacing(1),
  background:
    "linear-gradient(96deg, rgba(35, 51, 71, 0.8) 0%, rgba(30, 44, 60, 0.9) 100%)",
  backdropFilter: "blur(4px)",
  padding: theme.spacing(1.5),
  fontFamily: "Poppins, sans-serif",
  width: "100%",
  color: theme.palette.common.white,
  maxWidth: "740px",
  [theme.breakpoints.down("md")]: {
    minHeight: "542px",
  },
}));

const Header = styled("header")(({ theme }) => ({
  marginBottom: theme.spacing(2),
}));

const StyledDivider = styled(Divider)(({ theme }) => ({
  backgroundColor: "rgba(80, 94, 110, 1)",
  margin: `${theme.spacing(1)} 0`,
}));

const MetricsContent = styled("main")(({ theme }) => ({
  fontSize: "12px",
  color: theme.palette.grey[400],
}));

export default ReturnMetricsComponent;
